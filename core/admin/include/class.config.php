<?php


class config {
	private static $default_file_content = '<?php
/*-------------------------------------------------------*\
|  PHP BasicFramework - Ready to use PHP site framework   |
|  License: LGPL, see LICENSE                             |
\*-------------------------------------------------------*
|                       CONFIGURATION                     |
\*                                                       */

// Note : this file is generated by the configuration script. 
// Only edit section below --CONIG-OVERRIDE-BELOW

// Security check, do not remove this line
if (!defined("C_SECURITY")) die();

//--AUTOCONFIG-START

// code here has been generated by the installer
$_conf = array();

//--AUTOCONFIG-END

//--CONIG-OVERRIDE-BELOW

?>';
	public static $sections = array(), $subsections = array(), $fields = array();
	private static $config = null;
	static function get($key = null, $key2 = null, $key3 = null) {
		if (config::$config === null) config::load_config();
		if ($key3 !== null) 
			return is_array(config::$config[$key]) && is_array(config::$config[$key][$key2])? config::$config[$key][$key2][$key3] : '';
		if ($key2 !== null) 
			return is_array(config::$config[$key])? config::$config[$key][$key2] : '';
		if ($key !== null) return config::$config[$key];
	}
	static function to_html($value) {
		return htmlspecialchars(is_array($value)? implode(' | ', $value) : $value, ENT_QUOTES);
	}
	static function search ($patern) {
		$return = Array();
		foreach( config::$config as $key=> $val ) {
			if( preg_match($patern, $key ) ) $return[$key] = $val;
		}
		return $return;
	}
	static function load_config() {
		if (!defined("C_SECURITY")) define("C_SECURITY", TRUE);	
		if (config::$config === null) {
			@include(CONFIG_FILE);
			if (!isset($_conf)) common::error("Failed loading configuration file. Make sure file ./Framework/config.php exists and is valid.");
			config::$config = $_conf;
		}
		return config::$config; 
	}
	static function config_exists() {
		return file_exists(CONFIG_FILE);
	}
	static function save_config($conf) {
		if (!config::config_exists()) config::create_config();
		$content = file_get_contents(CONFIG_FILE);
		$new = substr($content, 0, strpos($content, '//--AUTOCONFIG-START')+20)."\n\n";
		ksort($conf);
		$new .= '$_conf = '.var_export($conf, true).";\n";
		if (strlen($conf['error_reporting']) != 0) $new .= '$_conf["error_reporting"] = '.$conf['error_reporting'].";\n\n";
		$new .= substr($content, strpos($content, '//--AUTOCONFIG-END'));
		if (file_put_contents(CONFIG_FILE_WRITE, $new) === FALSE) {
			common::error("Failed writing to config.php, make sure it is writale. See Test Server section for more info");
		}
	}
	static function create_config() {
		if (@file_put_contents(CONFIG_FILE_WRITE, config::$default_file_content) === false) {
			common::error("Could not create config.php, make sure folder is writable. See Test Server section for more info.");
		}
	}
	static function reg_section($name, $data) {
		config::$sections[$name] = $data;
		config::$subsections[$name] = array();
	}
	static function reg_subsection($section, $name, $data) {
		config::$subsections[$section][$name] = $data;
		config::$fields[$section][$name] = array();
	}
	static function reg_field($section, $subsection, $name, $data) {
		config::$fields[$section][$subsection][$name] = $data;
	}
	static function load_confdata () {
		$config_files = scandir(DIR.'/plugins');
		foreach ($config_files as $file) {
			if (strtolower(substr($file, 0, 8)) != "install." && strtolower(substr($file, -4)) == ".php") {
				require_once (DIR."/plugins/".$file);
			}
		}
	}
	static function is_complete() {
		config::load_confdata();
		$current_config = config::load_config();
		$default_config = array();
		foreach (config::$sections as $id_sec => $sec) {
			foreach (config::$subsections[$id_sec] as $id_sub => $sub) {
				foreach (config::$fields[$id_sec][$id_sub] as $id => $field) {
					if ($field["onsave"])  $field["onsave"]($id, $field["default"], $default_config);
					else  $default_config[$id] = $field["default"];
				}
			}
		}
		foreach ($default_config as $id => $value) {
			if (!isset($current_config[$id])) return false;
		}
		return true;
	}
}
